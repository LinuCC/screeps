* Zerglings extension pathing
  - Every Zerg should be able to chain prio-items together based on the path
    to that item.
  - Also calculate the Zergs lifetime and what it can do if that is very
    limited
  - The prio-list should have an accommodating mapping of structures close to
    each other:
    #+BEGIN_SRC json
      {
        <structureId>: {

        }
      }
    #+END_SRC
      - How does the creep use this information to select specific elements?
        Whats the algorithm?

* priorityQueue
  - Basic Prioritising: Each basic PRIO-Type has 10000 count more than its
    direct predecessor
  - Differences between items of the same PRIO-Type can be stored by changing
    the count. Up to 5000 count added or subtracted from the base-value is
    okay.
  - How does the range between items affect the prio?
    => "Range" cannot be expressed by a single item-instance, thus cant be
    expressed directly as a priority

** Priority types

*** Types
  - Critical (> 30000)
    - A zergling should constantly execute this item until a certain
      condition is met, at which point the item gets removed and the zergling
      takes a different task.
      Useful for example to keep the tower from getting empty when an enemy
      attacks.
      The creep should only move when it is empty, not on the first failed
      try (If the tower is full, wait at the tower and refill it until the
      creeps inventory is empty)
  - Urgent (< 30000)
  - Normal (< 20000)
  - Passive / Dump (< 10000)
    - These should be cloned except its the last possible transaction (like
      transferring to the storage when it is near full and will be brimming
      when done)

*** Differentiation
  - Each type should be differentiated by removing a count of 10000 from the Prio
    to the Priority-counts found in the type under that.

** Range & Priority
  - Range should have a big impact on the selection of the next item and
    should also be the reason to stack multiple items onto one zergling.
  - There should be "critical" / "urgent" tasks, which priorities shouldnt be
    overriden by the range so that non-critical tasks dont get prioritized
    above them.
  - At the same time the range shouldnt make "passive" tasks (like filling
    the storage) more important than urgent or normal tasks.
    => The range can alter the base priority value of an item by up to 5000
       subtracted or added.

*** Calculation
  - We dont need to calculate the entire priorityQueue for each
    Creep-position.
    Since the range will not change the priority to another type, we only
    need to search for items with priorities of (5000 + the first items
    priority).
    We can apply the range-alterations to the priority-values of the
    resulting array of items and sort them.
    The zergling can then pick the first item from the stack.
    Filter the Array of leftover items by the amount of resources the creep
    still has, throw away the previous range-alterations and calculate new
    ones based on the creeps position when fulfilling the picked item.
    Loop until the creep cant fulfill any more roles.
    This means that for max efficiency he shouldnt repair the roads since
    some items cant be fulfilled that way.
    If the creep carries an insufficient amount of resources for even the
    first task, he should search a source and then take as many items as he
    can to satisfy the one sourcing.

* Spawning
  - Introduce a priorityQueue for the creep-spawning, which takes the
   following into account:
    - Reboot:
      - If Energy-sources are low (Spawn, Extensions , Source-Containers &
        Storage) build a Harvester which manually harvests & refills the
        Energy-sources.
        This is top-priority if the calamity hits!
        - If spawn-resources are low, but Source-Containers * Storage contain
          energy, but we have no transporters (Drones) on the field, also go
          into reboot
      - If the controller is close to downgrading & there is no worker-creep
        available, build a worker-creep
        (Ofc there should be a critical work-task generated by the Overlord to
        at least bring 1 Resource harvested from an energy-source to the
        Controller to reset its ticks)
    - Adjusting to the PrioQueue:
      - Create a rating-system rating the workload of each item of the
        prioQueue so you get a feeling if these tasks go up over time / dont
        get done so you can adjust the amount of Work-/Carry-Creeps and their
        bodyparts.
    - Adjusting the creeps bodyparts to the RCL & energy-situation of the room
      - The creeps bodyparts should be automatically generated and generally
        close to the maximum possible amount of them, since fewer but bigger
        save CPU and dont block each others pathing as much.
      - each type of creep should have a per-room predefined array of bodyparts
        like [WORK, WORK, CARRY] and these should be filled up with MOVEs
        either using road (2:1) or using all-terrain (1:1)
      - Remote rooms should also define the bodyparts needed, ast least for
        the Infestor, the Corruptor and the fighter (Fighter wants to have
        ATTACK, RANGED_ATTACK, TOUGH and possibly HEAL if in Sourcekeeper-room)
    - The enemy-state of the room
      - if it is being attacked by another player or by Source Keepers it
        should spawn fighters and ranged fighters that are being positioned
        into the ramparts so that they can help the turret deff.
        This of course needs to account for the size of the enemy force.
    - The outposts and their state the room should farm
      - If it has source keepers in it fight dem thingies by spawning special
        fighters (much attack, some ranged dps, a bit of heal)
      - keep up an excavator for each energy-source
      - calculate how many drones are needed for transport / add tasks to the
        correct room so that the mined energy gets transported away
* Links
  - There are "source"-links and "consumer"-links
    - Zerglings put Energy into the Source-links if it is not full
    - Source-links automatically transfer the energy to a "consumer"-link if
      it i/.
* Corruptors
  - Each main-room has a queue with items that should be either claimed,
    reserved or downgraded
    - Three types: [CLAIM, RESERVE, DOWNGRADE]
  - Priorities: DOWNGRADE < CLAIM < RESERVE
  - Differentiate RESERVEs by the time they have still got and the range they
    are in
    - prio = baseprio + ((ticksMax - ticksToDecay) * decayModifier) +
      (range * rangeModifier)
    - creep with 3 CLAIM gets max 1000 (+ 500 stale) decay-ticks out of a
      RESERVE
    - Each remote controller should have a threshold at which it is ideal to
      spawn a creep, so that the timing can be pretty precise instead of
      guessing
      - IF we guess, then we can say that if (ticksMax - tickstoDecay) > 1000,
        we should send over a creep since he cant possibly refresh that much
        reserve.
        Ah fuck calculating, guessing is much easier
    - CLAIM would only need 1 CLAIM-Part
